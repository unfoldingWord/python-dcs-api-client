# coding: utf-8

"""
    DCS (Gitea) API.

    This documentation describes the DCS (Gitea) API.  # noqa: E501

    OpenAPI spec version: 1.20.3+dcs
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dcs_api_client.configuration import Configuration


class Ingredient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alignment_count': 'int',
        'categories': 'list[str]',
        'identifier': 'str',
        'path': 'str',
        'sort': 'int',
        'title': 'str',
        'versification': 'str'
    }

    attribute_map = {
        'alignment_count': 'alignment_count',
        'categories': 'categories',
        'identifier': 'identifier',
        'path': 'path',
        'sort': 'sort',
        'title': 'title',
        'versification': 'versification'
    }

    def __init__(self, alignment_count=None, categories=None, identifier=None, path=None, sort=None, title=None, versification=None, _configuration=None):  # noqa: E501
        """Ingredient - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alignment_count = None
        self._categories = None
        self._identifier = None
        self._path = None
        self._sort = None
        self._title = None
        self._versification = None
        self.discriminator = None

        if alignment_count is not None:
            self.alignment_count = alignment_count
        if categories is not None:
            self.categories = categories
        if identifier is not None:
            self.identifier = identifier
        if path is not None:
            self.path = path
        if sort is not None:
            self.sort = sort
        if title is not None:
            self.title = title
        if versification is not None:
            self.versification = versification

    @property
    def alignment_count(self):
        """Gets the alignment_count of this Ingredient.  # noqa: E501


        :return: The alignment_count of this Ingredient.  # noqa: E501
        :rtype: int
        """
        return self._alignment_count

    @alignment_count.setter
    def alignment_count(self, alignment_count):
        """Sets the alignment_count of this Ingredient.


        :param alignment_count: The alignment_count of this Ingredient.  # noqa: E501
        :type: int
        """

        self._alignment_count = alignment_count

    @property
    def categories(self):
        """Gets the categories of this Ingredient.  # noqa: E501


        :return: The categories of this Ingredient.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Ingredient.


        :param categories: The categories of this Ingredient.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def identifier(self):
        """Gets the identifier of this Ingredient.  # noqa: E501


        :return: The identifier of this Ingredient.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Ingredient.


        :param identifier: The identifier of this Ingredient.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def path(self):
        """Gets the path of this Ingredient.  # noqa: E501


        :return: The path of this Ingredient.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Ingredient.


        :param path: The path of this Ingredient.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def sort(self):
        """Gets the sort of this Ingredient.  # noqa: E501


        :return: The sort of this Ingredient.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Ingredient.


        :param sort: The sort of this Ingredient.  # noqa: E501
        :type: int
        """

        self._sort = sort

    @property
    def title(self):
        """Gets the title of this Ingredient.  # noqa: E501


        :return: The title of this Ingredient.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Ingredient.


        :param title: The title of this Ingredient.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def versification(self):
        """Gets the versification of this Ingredient.  # noqa: E501


        :return: The versification of this Ingredient.  # noqa: E501
        :rtype: str
        """
        return self._versification

    @versification.setter
    def versification(self, versification):
        """Sets the versification of this Ingredient.


        :param versification: The versification of this Ingredient.  # noqa: E501
        :type: str
        """

        self._versification = versification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ingredient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ingredient):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ingredient):
            return True

        return self.to_dict() != other.to_dict()
